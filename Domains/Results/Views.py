import csv
import io
import jwt
from django.conf import settings
from django.contrib.auth import get_user_model
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from Domains.ManageData.models import Upload
from Domains.Results.LLMs.agents import summarizer, webAgent, feynmanAgent, davinciAgent, einsteinAgent, husseinAgent
from Domains.Results.Serializer import UploadSerializer 
 


User = get_user_model()

class JobsAgentAPIView(APIView):
    """
    API Endpoint: Accepts a CSV file of user-behavior analytics,
    passes it to the summarizer agent, and returns a UX summary.
    """

    def post(self, request):
        csv_file = request.FILES.get("file")

        if not csv_file:
            return Response(
                {"error": "A CSV file is required in the 'file' field."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            csv_text = csv_file.read().decode("utf-8")
        except Exception as e:
            return Response(
                {"error": f"Failed to read CSV file: {str(e)}"},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            summary = summarizer(user_id=None, csv_content=csv_text)
        except Exception as e:
            return Response(
                {"error": f"Error while generating summary: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response({"ux_summary": summary}, status=status.HTTP_200_OK)


class ZahraAgent(APIView):
    """
    API Endpoint: Accepts two JSON objects (url_metrics and shark_metrics),
    passes them to the webAgent function, and returns the evaluation result.
    """

    def post(self, request):
        # Extract metrics from the request payload.
        url_metrics = request.data.get("url_metrics")
        shark_metrics = request.data.get("shark_metrics")

        if not url_metrics or not shark_metrics:
            return Response(
                {"error": "Both 'url_metrics' and 'shark_metrics' are required."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            # Call the webAgent function with the provided metrics.
            evaluation = webAgent(url_metrics, shark_metrics)
        except Exception as e:
            return Response(
                {"error": f"An error occurred while processing the request: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        # Return the evaluation output as JSON.
        return Response({"web_evaluation": evaluation}, status=status.HTTP_200_OK)
    
    from rest_framework.views import APIView

class FeynmanAgentAPIView(APIView):
    """
    API Endpoint: Accepts raw HTML and CSS input (with optional metadata like title, headings, links),
    analyzes them using the Feynman agent, and returns a UX interpretation summary.
    """

    def post(self, request):
        html = request.data.get("html")
        css = request.data.get("css")
        title = request.data.get("title")
        headings = request.data.get("headings")
        links = request.data.get("links")

        if not html or not css:
            return Response(
                {"error": "Both 'html' and 'css' fields are required."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            summary = feynmanAgent(html=html, css=css, title=title, headings=headings, links=links)
        except Exception as e:
            return Response(
                {"error": f"An error occurred while analyzing the UI: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response({"feynman_summary": summary}, status=status.HTTP_200_OK)
    

class DavinciAgentAPIView(APIView):
    """
    API Endpoint: Accepts UI summary (from Feynman agent) and UX summary (from Jobs agent),
    and returns a list of questions generated by the Davinci agent.
    """

    def post(self, request):
        ui_summary = request.data.get("ui_summary")
        ux_summary = request.data.get("ux_summary")

        if not ui_summary or not ux_summary:
            return Response(
                {"error": "Both 'ui_summary' and 'ux_summary' are required."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            questions = davinciAgent(ui_summary, ux_summary)
        except Exception as e:
            return Response(
                {"error": f"An error occurred while generating questions: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response({"questions": questions}, status=status.HTTP_200_OK)
    
class EinsteinAgentAPIView(APIView):
    """
    API Endpoint: Accepts a question, uba_csv, html, and css, and returns an answer.
    """

    def post(self, request):
        question = request.data.get("question")
        uba_csv = request.data.get("uba_csv")
        html = request.data.get("html")
        css = request.data.get("css")

        if not all([question, uba_csv, html, css]):
            return Response(
                {"error": "All of 'question', 'uba_csv', 'html', and 'css' are required."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            answer = einsteinAgent(question, uba_csv, html, css)
        except Exception as e:
            return Response(
                {"error": f"Error while generating answer: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response({"einstein_answer": answer}, status=status.HTTP_200_OK)



class HusseinAgentAPIView(APIView):
    """
    API Endpoint: Accepts a product question and its expert answer, then returns a simplified insight.
    """

    def post(self, request):
        question = request.data.get("question")
        answer = request.data.get("answer")

        if not question or not answer:
            return Response(
                {"error": "'question' and 'answer' fields are required."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            summary = husseinAgent(question, answer)
        except Exception as e:
            return Response(
                {"error": f"Error while summarizing insight: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response({"user_friendly_summary": summary}, status=status.HTTP_200_OK)
